import { useState } from 'react';
import { Calendar as CalendarIcon } from 'lucide-react';
import YearCalendar from '../calendar/YearCalendar';
import WeekCalendar from '../calendar/WeekCalendar';
import DiaryEntry from '../DiaryEntry';
import NewEntry from '../NewEntry';
import type { DiaryEntry as DiaryEntryType } from '../../types';
import { createDiaryEntry, updateDiaryEntry, deleteDiaryEntry } from '../../api/diary';

interface Props {
  entries: DiaryEntryType[];
  onNewEntry: (content: string, mood: 'happy' | 'neutral' | 'sad', date: string) => Promise<void>;
  onDeleteEntry: (id: string) => Promise<void>;
  onEditEntry: (id: string, content: string) => Promise<void>;
}

export default function DiaryView({ entries, onNewEntry, onDeleteEntry, onEditEntry }: Props) {
  const [calendarView, setCalendarView] = useState<'year' | 'week'>('week');
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [error, setError] = useState<string | null>(null);

  const handleNewEntry = async (content: string, mood: 'happy' | 'neutral' | 'sad', date: string) => {
    try {
      setError(null);
      await onNewEntry(content, mood, date);
    } catch (err) {
      console.error('Failed to create entry:', err);
      setError('Failed to save entry. Please try again.');
    }
  };

  const handleEditEntry = async (id: string, content: string) => {
    try {
      setError(null);
      await onEditEntry(id, content);
    } catch (err) {
      console.error('Failed to update entry:', err);
      setError('Failed to update entry. Please try again.');
    }
  };

  const handleDeleteEntry = async (id: string) => {
    try {
      setError(null);
      await onDeleteEntry(id);
    } catch (err) {
      console.error('Failed to delete entry:', err);
      setError('Failed to delete entry. Please try again.');
    }
  };

  const filteredEntries = entries.filter(entry => {
    const entryDate = new Date(entry.date);
    const startOfDay = new Date(selectedDate);
    startOfDay.setHours(0, 0, 0, 0);
    
    const endOfDay = new Date(selectedDate);
    endOfDay.setHours(23, 59, 59, 999);
    
    return entryDate >= startOfDay && entryDate <= endOfDay;
  });

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800">Diary</h1>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setCalendarView('week')}
            className={`px-3 py-1 rounded-md ${
              calendarView === 'week' ? 'bg-blue-500 text-white' : 'bg-gray-100'
            }`}
          >
            Week
          </button>
          <button
            onClick={() => setCalendarView('year')}
            className={`px-3 py-1 rounded-md ${
              calendarView === 'year' ? 'bg-blue-500 text-white' : 'bg-gray-100'
            }`}
          >
            Year
          </button>
        </div>
      </div>

      {calendarView === 'year' ? (
        <YearCalendar onDateSelect={setSelectedDate} entries={entries} />
      ) : (
        <WeekCalendar onDateSelect={setSelectedDate} entries={entries} />
      )}

      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center gap-2 mb-4">
          <CalendarIcon className="w-5 h-5 text-gray-500" />
          <h2 className="text-lg font-semibold">
            {selectedDate.toLocaleDateString('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })}
          </h2>
        </div>

        {error && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
            {error}
          </div>
        )}

        <NewEntry onSubmit={handleNewEntry} selectedDate={selectedDate} />

        {filteredEntries.length === 0 ? (
          <p className="text-center text-gray-500 py-8">No entries for this date</p>
        ) : (
          <div className="space-y-4">
            {filteredEntries.map(entry => (
              <DiaryEntry
                key={entry.id}
                entry={entry}
                onDelete={handleDeleteEntry}
                onEdit={handleEditEntry}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}import { db, diaryEntries } from '../lib/db';
import { eq } from 'drizzle-orm';

const DEFAULT_USER_ID = 'default-user';

export async function createDiaryEntry(content: string, mood: string, date: string) {
  try {
    const entry = await db.insert(diaryEntries).values({
      id: crypto.randomUUID(),
      userId: DEFAULT_USER_ID,
      content,
      mood,
      date,
      tags: [],
      createdAt: new Date(),
      updatedAt: new Date()
    }).returning();
    
    return entry[0];
  } catch (error) {
    console.error('Failed to create diary entry:', error);
    throw error;
  }
}

export async function getDiaryEntries() {
  try {
    return await db.select()
      .from(diaryEntries)
      .where(eq(diaryEntries.userId, DEFAULT_USER_ID))
      .orderBy(diaryEntries.date);
  } catch (error) {
    console.error('Failed to load diary entries:', error);
    throw error;
  }
}

export async function updateDiaryEntry(id: string, content: string) {
  try {
    const [updatedEntry] = await db.update(diaryEntries)
      .set({ 
        content, 
        updatedAt: new Date() 
      })
      .where(eq(diaryEntries.id, id) && eq(diaryEntries.userId, DEFAULT_USER_ID))
      .returning();
    
    return updatedEntry;
  } catch (error) {
    console.error('Failed to update diary entry:', error);
    throw error;
  }
}

export async function deleteDiaryEntry(id: string) {
  try {
    await db.delete(diaryEntries)
      .where(eq(diaryEntries.id, id) && eq(diaryEntries.userId, DEFAULT_USER_ID));
  } catch (error) {
    console.error('Failed to delete diary entry:', error);
    throw error;
  }
}import express from 'express';
import cors from 'cors';
import { createDiaryEntry, getDiaryEntries } from '../api/diary';
import { createNote, getNotes } from '../api/notes';
import { createFinanceEntry, getFinanceEntries } from '../api/finances';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json());

// Serve static files from the dist directory
app.use(express.static(path.join(__dirname, '../dist')));

// Health check endpoint
app.get('/api/health', (_, res) => res.send('OK'));

// Diary routes
app.post('/api/diary', async (req, res) => {
  try {
    const { userId, content, mood } = req.body;
    const entry = await createDiaryEntry(userId, content, mood);
    res.json(entry);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create diary entry' });
  }
});

app.get('/api/diary/:userId', async (req, res) => {
  try {
    const entries = await getDiaryEntries(req.params.userId);
    res.json(entries);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch diary entries' });
  }
});

// Notes routes
app.post('/api/notes', async (req, res) => {
  try {
    const { userId, title, content } = req.body;
    const note = await createNote(userId, title, content);
    res.json(note);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create note' });
  }
});

app.get('/api/notes/:userId', async (req, res) => {
  try {
    const notes = await getNotes(req.params.userId);
    res.json(notes);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch notes' });
  }
});

// Finance routes
app.post('/api/finances', async (req, res) => {
  try {
    const { userId, amount, type, category, description } = req.body;
    const entry = await createFinanceEntry(userId, amount, type, category, description);
    res.json(entry);
  } catch (error) {
    res.status(500).json({ error: 'Failed to create finance entry' });
  }
});

app.get('/api/finances/:userId', async (req, res) => {
  try {
    const entries = await getFinanceEntries(req.params.userId);
    res.json(entries);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch finance entries' });
  }
});

// Serve index.html for all other routes (SPA support)
app.get('*', (_, res) => {
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';
import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core';

const DATABASE_URL = process.env.DATABASE_URL || '';

const sql = neon(DATABASE_URL);
export const db = drizzle(sql);

// Define tables
export const diaryEntries = pgTable('diary_entries', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull(),
  content: text('content').notNull(),
  mood: text('mood').notNull(),
  date: text('date').notNull(),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
  tags: text('tags').array()
});

export const todos = pgTable('todos', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull(),
  content: text('content').notNull(),
  completed: boolean('completed').default(false),
  date: timestamp('date').defaultNow(),
  completedAt: timestamp('completed_at')
});

export const notes = pgTable('notes', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull(),
  title: text('title').notNull(),
  content: text('content').notNull(),
  cardId: text('card_id').notNull(),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow(),
  tags: text('tags').array()
});

export const flashcards = pgTable('flashcards', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull(),
  name: text('name').notNull(),
  parentId: text('parent_id'),
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at').defaultNow()
});

// Database initialization
export async function initializeDatabase() {
  try {
    console.log('Initializing database...');
    
    // Create diary entries table
    await sql`
      CREATE TABLE IF NOT EXISTS diary_entries (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        content TEXT NOT NULL,
        mood TEXT NOT NULL,
        date TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        tags TEXT[]
      )
    `;

    // Create todos table
    await sql`
      CREATE TABLE IF NOT EXISTS todos (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        content TEXT NOT NULL,
        completed BOOLEAN DEFAULT FALSE,
        date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP WITH TIME ZONE
      )
    `;

    // Create indexes
    await sql`CREATE INDEX IF NOT EXISTS idx_diary_user ON diary_entries(user_id)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_diary_date ON diary_entries(date)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_todos_user ON todos(user_id)`;
    await sql`CREATE INDEX IF NOT EXISTS idx_todos_date ON todos(date)`;

    console.log('Database initialized successfully');
  } catch (error) {
    console.error('Failed to initialize database:', error);
    throw error;
  }
}

// Test database connection
export async function testConnection() {
  try {
    const result = await sql`SELECT NOW()`;
    console.log('Database connection successful:', result);
    return true;
  } catch (error) {
    console.error('Database connection failed:', error);
    return false;
  }
}import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';

const sql = neon(process.env.DATABASE_URL!);
export const db = drizzle(sql);

export async function executeQuery<T>(operation: () => Promise<T>): Promise<T> {
  try {
    return await operation();
  } catch (error) {
    console.error('Database operation failed:', error);
    throw error;
  }
}export interface DiaryEntry {
  id: string;
  content: string;
  mood: 'happy' | 'neutral' | 'sad';
  date: string;
  tags: string[];
  lastModified: string;
  createdAt: string;
}

export interface Note {
  id: string;
  title: string;
  content: string;
  tags: string[];
  lastModified: string;
  createdAt: string;
}

export interface FlashCard {
  id: string;
  name: string;
  type: 'folder';
  notes: Note[];
  children: FlashCard[];
  lastModified: string;
  createdAt: string;
}

export interface DeletedCard extends FlashCard {
  deletedAt: string;
}

export interface FinanceEntry {
  id: string;
  amount: number;
  type: 'income' | 'expense';
  category: string;
  description?: string;
  account: string;
  date: string;
}

export type AccountType = 'checking' | 'savings' | 'credit' | 'cash';

export interface Account {
  id: string;
  name: string;
  type: AccountType;
  balance: number;
  currency: string;
}export interface ServiceResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
}

export interface ServiceConfig {
  port: number;
  serviceName: string;
  dbUrl: string;
}import { pgTable, text, timestamp, boolean } from 'drizzle-orm/pg-core';

export const todos = pgTable('todos', {
  id: text('id').primaryKey(),
  content: text('content').notNull(),
  completed: boolean('completed').notNull().default(false),
  date: timestamp('created_at').defaultNow(),
  completedAt: timestamp('completed_at'),
});export function generateId(): string {
  return crypto.randomUUID();
}import { useState } from 'react';
import { FileText, Edit2, Trash2, AlertCircle } from 'lucide-react';
import type { Note } from '../../types';

interface Props {
  note: Note;
  onEdit: (updates: Partial<Note>) => Promise<void>;
  onDelete: () => Promise<void>;
}

export default function NoteCard({ note, onEdit, onDelete }: Props) {
  const [isEditing, setIsEditing] = useState(false);
  const [editTitle, setEditTitle] = useState(note.title);
  const [editContent, setEditContent] = useState(note.content);
  const [error, setError] = useState<string | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);

  const handleSave = async () => {
    if (!editTitle.trim() || !editContent.trim()) return;
    
    try {
      setError(null);
      await onEdit({
        title: editTitle,
        content: editContent,
        lastModified: new Date().toISOString()
      });
      setIsEditing(false);
    } catch (err) {
      console.error('Failed to save note:', err);
      setError('Failed to save note. Please try again.');
    }
  };

  const handleDelete = async () => {
    try {
      setError(null);
      await onDelete();
      setIsDeleting(false);
    } catch (err) {
      console.error('Failed to delete note:', err);
      setError('Failed to delete note. Please try again.');
    }
  };

  if (isDeleting) {
    return (
      <div className="group relative bg-white rounded-xl shadow-md p-6 flex flex-col items-center justify-center text-center">
        <AlertCircle className="w-12 h-12 text-red-500 mb-4" />
        <h3 className="text-lg font-semibold mb-2">Delete Note?</h3>
        <p className="text-sm text-gray-600 mb-4">
          Are you sure you want to delete "{note.title}"? This action cannot be undone.
        </p>
        <div className="flex gap-3">
          <button
            onClick={() => setIsDeleting(false)}
            className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800"
          >
            Cancel
          </button>
          <button
            onClick={handleDelete}
            className="px-4 py-2 text-sm bg-red-500 text-white rounded-md hover:bg-red-600"
          >
            Delete
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="group relative bg-white rounded-xl shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 p-6">
      <div className="absolute inset-0 bg-gradient-to-br from-purple-50 to-white rounded-xl opacity-50 group-hover:opacity-100 transition-opacity" />
      
      <div className="relative z-10">
        {error && (
          <div className="mb-4 text-sm text-red-600 bg-red-50 p-2 rounded">
            {error}
          </div>
        )}

        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center group-hover:bg-purple-200 transition-colors">
              <FileText className="w-5 h-5 text-purple-500" />
            </div>
            {isEditing ? (
              <input
                type="text"
                value={editTitle}
                onChange={(e) => setEditTitle(e.target.value)}
                className="px-2 py-1 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                autoFocus
              />
            ) : (
              <div>
                <h3 className="font-medium text-gray-800">{note.title}</h3>
                <p className="text-xs text-gray-500">
                  Last modified {new Date(note.lastModified).toLocaleDateString()}
                </p>
              </div>
            )}
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={() => setIsEditing(!isEditing)}
              className="p-1 text-gray-400 hover:text-purple-500"
            >
              <Edit2 className="w-4 h-4" />
            </button>
            <button
              onClick={() => setIsDeleting(true)}
              className="p-1 text-gray-400 hover:text-red-500"
            >
              <Trash2 className="w-4 h-4" />
            </button>
          </div>
        </div>
        
        {isEditing ? (
          <div className="space-y-4">
            <textarea
              value={editContent}
              onChange={(e) => setEditContent(e.target.value)}
              className="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              rows={4}
            />
            <div className="flex justify-end gap-2">
              <button
                onClick={() => {
                  setIsEditing(false);
                  setEditTitle(note.title);
                  setEditContent(note.content);
                  setError(null);
                }}
                className="px-3 py-1 text-gray-600 hover:text-gray-800"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                disabled={!editTitle.trim() || !editContent.trim()}
                className="px-3 py-1 bg-purple-500 text-white rounded-md hover:bg-purple-600 disabled:opacity-50"
              >
                Save
              </button>
            </div>
          </div>
        ) : (
          <p className="text-gray-700 whitespace-pre-wrap">{note.content}</p>
        )}
        
        {note.tags && note.tags.length > 0 && (
          <div className="mt-4 flex flex-wrap gap-2">
            {note.tags.map((tag, index) => (
              <span
                key={index}
                className="px-2 py-1 text-xs bg-purple-100 text-purple-600 rounded-full"
              >
                {tag}
              </span>
            ))}
          </div>
        )}
      </div>

      <div className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-500 to-purple-600 rounded-b-xl transform scale-x-0 group-hover:scale-x-100 transition-transform" />
    </div>
  );
}import { useState } from 'react';
import { Plus, Search } from 'lucide-react';
import FlashCard from './FlashCard';
import type { FlashCard as FlashCardType } from '../../types';

interface Props {
  cards: FlashCardType[];
  onAddCard: (card: Omit<FlashCardType, 'id'>) => void;
  onSelectCard: (card: FlashCardType) => void;
  onEditCard: (cardId: string, updates: Partial<FlashCardType>) => void;
  onDeleteCard: (cardId: string) => void;
}

export default function NotesView({ cards, onAddCard, onSelectCard, onEditCard, onDeleteCard }: Props) {
  const [isAddingCard, setIsAddingCard] = useState(false);
  const [newCardName, setNewCardName] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  const handleAddCard = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newCardName.trim()) return;
    
    onAddCard({
      name: newCardName,
      type: 'folder',
      notes: [],
      children: [],
      lastModified: new Date().toISOString(),
    });
    
    setNewCardName('');
    setIsAddingCard(false);
  };

  const filteredCards = cards.filter(card => 
    card.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-800">Notes</h1>
        <button
          onClick={() => setIsAddingCard(true)}
          className="flex items-center gap-2 px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
        >
          <Plus className="w-4 h-4" />
          New Card
        </button>
      </div>

      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
        <input
          type="text"
          placeholder="Search cards..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full pl-10 pr-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
      </div>

      {isAddingCard && (
        <form onSubmit={handleAddCard} className="bg-white p-4 rounded-lg shadow-md">
          <input
            type="text"
            value={newCardName}
            onChange={(e) => setNewCardName(e.target.value)}
            placeholder="Enter card name"
            className="w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            autoFocus
          />
          <div className="mt-3 flex justify-end gap-2">
            <button
              type="button"
              onClick={() => setIsAddingCard(false)}
              className="px-3 py-1 text-gray-600 hover:text-gray-800"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600"
            >
              Create
            </button>
          </div>
        </form>
      )}

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredCards.map((card) => (
          <FlashCard 
            key={card.id} 
            card={card} 
            onClick={() => onSelectCard(card)}
            onEdit={onEditCard}
            onDelete={onDeleteCard}
          />
        ))}
      </div>
    </div>
  );
}